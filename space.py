"""
Created by Diego Rubio Canales in ene 2025
Universidad Carlos III de Madrid
"""

from particle import Particle
import pygame

class Space:
    def __init__(self, width: int, height: int, bodies: list[Particle]):
        self.__width = width
        self.__height = height

        # Particle list
        self.bodies = bodies


    def update_space(self, dt):
        """Main loop during simulation"""
        self._restart_body_acceleration()
        self._gravity_field_acceleration()
        self._electric_field_acceleration()
        self._actualize_particles(dt)

    def draw(self, surface, scale: int):
        """Draw all the bodies in a space"""
        for particle in self.bodies:
            particle.draw(surface, scale)


    def _restart_body_acceleration(self):
        for body in self.bodies:
            body.restart_acceleration()

    def _actualize_particles(self, dt: float):
        for particle in self.bodies:
            particle.actualize_velocity(dt)
            particle.actualize_position(dt)

    def _gravity_field_acceleration(self):
        """Method that calculates de acceleration due to all the masses in a space"""

        for particle in self.bodies:
            # List of each body without the particle
            interact_with = self.bodies.copy()
            interact_with.remove(particle)
            # Calculates de current particle acceleration due other
            # particles using the method <g_field_generated>
            for other_particle in interact_with:

                # G-Field generated by "other_particle" at particle position
                g = other_particle.g_field_generated(
                    particle.pos.i, particle.pos.j, particle.pos.k)

                # Sum the current acceleration of the particle
                particle.a = particle.a + g

    def _electric_field_acceleration(self):
        """Method that calculates de acceleration due to all the charges in a
        space"""

        for particle in self.bodies:
            # List of each body without the particle
            interact_with = self.bodies.copy()
            interact_with.remove(particle)

            # Calculates de current particle acceleration due other
            # particles using the method <e_field_generated>
            for other_particle in interact_with:
                # E-Field generated by "other_particle" at particle position
                E = other_particle.e_field_generated(
                    particle.pos.i, particle.pos.j, particle.pos.k)

                # Sum the current acceleration of the particle with the
                # field: a = (q/m)E
                particle.a = particle.a + E * (particle.q / particle.m)